name: Build and Test (macos)

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - 97-add-more-environments-to-test-in-ci

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        host: [
          { os: macos-12, compiler: { cc: clang, cxx: clang++ }, gcov: llvm-gcov },
          { os: macos-13, compiler: { cc: clang, cxx: clang++ }, gcov: llvm-gcov },
          { os: macos-14, compiler: { cc: clang, cxx: clang++ }, gcov: llvm-gcov }
          # { os: macos-14, compiler: { name: gcc12, cc: gcc-12, cxx: g++-12 }, gcov: gcov-12 } # VTK Build issue
        ]
        vtk_version: [ 9.3.1 ]
    runs-on: ${{ matrix.host.os }}
    name: vt-tv build and test
    env:
        VTK_SRC_DIR: /opt/src/vtk
        VTK_BUILD_DIR: /opt/build/vtk
        VTK_CACHE_KEY: ${{ matrix.host.os }}-${{ matrix.host.compiler.cc }}-vtk-${{ matrix.vtk_version }}
        VT_TV_BUILD_DIR: /opt/build/vt-tv
        VT_TV_TESTS_ENABLED: "ON"
        VT_TV_COVERAGE_ENABLED: ${{ matrix.host.compiler.gcov == '' && 'OFF' || 'ON'  }}
        VT_TV_OUTPUT_DIR: ${{ github.workspace }}/output
        VT_TV_TESTS_OUTPUT_DIR: ${{ github.workspace }}/output/tests
        VT_TV_ARTIFACTS_DIR: /tmp/artifacts
        CC: ~
        CXX: ~
        GCOV: ~
        PYTHON_VERSIONS: ("3.8", "3.9")
    steps:
      - uses: actions/checkout@v4

      - name: Set folder permissions
        run: |
          sudo mkdir -p ${{ env.VTK_SRC_DIR }} ${{ env.VT_TV_BUILD_DIR }}
          sudo chown -R $(whoami) /opt ${{ env.VTK_SRC_DIR }}  ${{ env.VT_TV_BUILD_DIR }}

      - name: Set environment variables
        run: |
          echo "CC=$(which ${{ matrix.host.compiler.cc }})" >> $GITHUB_ENV
          echo "CXX=$(which ${{ matrix.host.compiler.cxx }})" >> $GITHUB_ENV
          echo "GCOV=$(which ${{ matrix.host.gcov }})" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          brew update && brew install coreutils lcov xquartz

      - name: Setup Miniconda
        run: |
          mkdir -p ~/miniconda3
          if [[ $(arch) == 'arm64' ]]; then
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o ~/miniconda3/miniconda.sh
          else
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o ~/miniconda3/miniconda.sh
          fi
          sudo bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
          rm -rf ~/miniconda3/miniconda.sh
          export PATH="~/miniconda3/bin:${PATH}"

          declare -a PYTHON_VERSIONS=${{ env.PYTHON_VERSIONS }}
          for python_version in "${PYTHON_VERSIONS[@]}"
          do
            # Create a new environment and install necessary packages
            sudo conda create -y -n py${python_version} python=${python_version} && \
            conda activate py${python_version} && \
            pip install nanobind && \
            conda deactivate
          done

      - name: Load VTK from cache
        id: vtk-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VTK_SRC_DIR }}
            ${{ env.VTK_BUILD_DIR }}
          key: ${{ env.VTK_CACHE_KEY }}

      - name: Setup VTK ${{ matrix.vtk_version }}
        if: ${{steps.vtk-cache.outputs.cache-hit != 'true'}}
        run: |
          mkdir -p ${{ env.VTK_SRC_DIR }}
          git clone --recursive --branch v${{ matrix.vtk_version }} https://gitlab.kitware.com/vtk/vtk.git ${{ env.VTK_SRC_DIR }}
          cd ${{ env.VTK_SRC_DIR }}
          cmake \
            -DCMAKE_BUILD_TYPE:STRING=Release \
            -DBUILD_TESTING:BOOL=OFF \
            -DCMAKE_C_COMPILER="${{ env.CC }}" \
            -DCMAKE_CXX_COMPILER="${{ env.CXX }}" \
            -DVTK_OPENGL_HAS_OSMESA:BOOL=OFF \
            -DVTK_DEFAULT_RENDER_WINDOW_OFFSCREEN:BOOL=OFF \
            -DVTK_USE_X:BOOL=OFF \
            -DVTK_USE_COCOA:BOOL=ON \
            -DVTK_USE_SDL2:BOOL=OFF \
            -DVTK_Group_Rendering:BOOL=OFF \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -S ${{ env.VTK_SRC_DIR }} -B ${{ env.VTK_BUILD_DIR }}
          cmake --build ${{ env.VTK_BUILD_DIR }} -j$(nproc)

      - name: Build
        run: |
          cd ${{ github.workspace }}
          chmod +x ./ci/build.sh

          mkdir -p ${{ env.VT_TV_BUILD_DIR }}

          CC="${{ env.CC }}" \
          CXX="${{ env.CXX }}" \
          VTK_DIR="${{ env.VTK_BUILD_DIR }}" \
          VT_TV_BUILD_DIR="${{ env.VT_TV_BUILD_DIR }}" \
          VT_TV_CLEAN=OFF \
          VT_TV_TESTS_ENABLED=${{ env.VT_TV_TESTS_ENABLED }} \
          VT_TV_COVERAGE_ENABLED=${{ env.VT_TV_COVERAGE_ENABLED }} \
          GCOV="${{ env.GCOV }}" \
          VT_TV_PYTHON_BINDINGS_ENABLED=OFF \
          VT_TV_WERROR_ENABLED=ON \
          ./build.sh

      - name: Test
        run: |
          cd ${{ github.workspace }}

          VTK_DIR=/opt/build/vtk \
          VT_TV_BUILD=OFF \
          VT_TV_BUILD_DIR="${{ env.VT_TV_BUILD_DIR }}" \
          VT_TV_COVERAGE_ENABLED=${{ env.VT_TV_COVERAGE_ENABLED }} \
          VT_TV_OUTPUT_DIR="${{ env.VT_TV_OUTPUT_DIR }}" \
          VT_TV_RUN_TESTS=ON \
          ./build.sh

      - name: Build and Test for Python (${{ env.PYTHON_VERSIONS }})
        run: |
          declare -a PYTHON_VERSIONS=${{ env.PYTHON_VERSIONS }}
          for python_version in "${PYTHON_VERSIONS[@]}"
          do
            # Activate conda environment
            conda activate py${python_version}
            # Add PyYaml dep and build vt-tv
            pip install PyYAML
            pip install .
            # Test
            python ./tests/test_bindings.py
            # Deactivate conda environment
            conda deactivate 
          done          

      - name: Collect artifacts
        run: |
          mkdir -p ${{ env.VT_TV_ARTIFACTS_DIR }}

          # > go to output directory
          pushd ${{ env.VT_TV_OUTPUT_DIR }}

          echo "> add junit test report artifact"
          cp "junit-report.xml" ${{ env.VT_TV_ARTIFACTS_DIR }}/ || true

          if [[ "${{ env.VT_TV_COVERAGE_ENABLED }}" == "ON" ]]; then
            echo "> add `coverage --list` file artifact"
            lcov --list lcov_vt-tv_test_no_deps.info > ${{ env.VT_TV_ARTIFACTS_DIR }}/lcov-list-report.txt

            echo "> add total lines coverage file artifact (percentage of lines covered)"
            # might be useful for generating later a badge in ci
            LCOV_SUMMARY=$(lcov --summary lcov_vt-tv_test_no_deps.info)
            LCOV_TOTAL_LINES_COV=$(echo $LCOV_SUMMARY | grep -E -o 'lines......: ([0-9.]+)*' | grep -o -E '[0-9]+.[0-9]+')
            echo $LCOV_TOTAL_LINES_COV > lcov-lines-total.txt
            cp lcov-lines-total.txt ${{ env.VT_TV_ARTIFACTS_DIR }}/
          fi
          popd

          echo "> add tests output mesh files and png artifacts"
          if [ -d "${{ env.VT_TV_TESTS_OUTPUT_DIR }}" ]; then
            cp "${{ env.VT_TV_TESTS_OUTPUT_DIR }}/"*".vtp"  ${{ env.VT_TV_ARTIFACTS_DIR }}/  || true
            cp "${{ env.VT_TV_TESTS_OUTPUT_DIR }}/"*".png"  ${{ env.VT_TV_ARTIFACTS_DIR }}/  || true
          fi

          echo "> list of collected artifacts:"
          pushd ${{ env.VT_TV_ARTIFACTS_DIR }}
          find ${{ env.VT_TV_ARTIFACTS_DIR }}  | while read line; do echo "- $line"; done
          popd

      - name: Unit tests
        if: ${{ env.VT_TV_TESTS_ENABLED == 'ON' }}
        uses: phoenix-actions/test-reporting@v15
        with:
          name: Tests report
          path: ${{ env.VT_TV_ARTIFACTS_DIR }}/junit-report.xml
          reporter: java-junit
          output-to: step-summary

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vt-tv-artifacts-${{ env.VTK_CACHE_KEY }}
          path: ${{ env.VT_TV_ARTIFACTS_DIR }}
