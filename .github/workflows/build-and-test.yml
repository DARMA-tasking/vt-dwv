name: Build and Test

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize, converted_to_draft, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
        - ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.8
        - ubuntu_22.04-clang_14-vtk_9.2.2-py_3.8
    env:
      OUTPUT_DIR: '/tmp/out'
    name: vt-tv build and test
    steps:
      - uses: actions/checkout@v4

      - name: CI Variables
        id: vars
        run: echo "DOCKER_TAG=$(echo ${{ github.ref }} | cut -d'/' -f3- | sed 's/[^a-z0-9_-]/__/gi')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
          echo "DOCKER_TAG: ${{ env.DOCKER_TAG }}"

      - name: Build the Docker Image; build and test vt-tv
        id: docker_build
        continue-on-error: true
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: ${{ env.DOCKER_TAG }}
          context: .
          file: ./ci/docker/build-and-test.dockerfile
          build-args: |
            BASE_IMAGE=pierrpebay/vt-tv:${{ matrix.image }}
          outputs: type=local,dest=${{ env.OUTPUT_DIR }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vt-tv-LastTestLogs
          path: ${{ env.OUTPUT_DIR }}

      - name: Unit tests
        uses: phoenix-actions/test-reporting@v15
        if: always()
        with:
          name: Tests report
          path: ${{ env.OUTPUT_DIR }}/tmp/artifacts/junit-report.xml
          reporter: java-junit
          output-to: step-summary

      - name: Coverage
        if: always()
        run: |
          echo '## Coverage' >> $GITHUB_STEP_SUMMARY
          echo '```shell' >> $GITHUB_STEP_SUMMARY
          cat ${{ env.OUTPUT_DIR }}/tmp/artifacts/lcov-list-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
